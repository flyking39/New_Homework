1. Создайте класс BankAccount (банковский счет) со следующими атрибутами:

account_number (номер счета) - строка из 10 цифр
account_holder (владелец счета) - строка с именем владельца
balance (баланс) - число, представляющее текущий баланс счета
Реализуйте следующие методы:

deposit(amount) - метод для внесения денег на счет. Метод должен проверять, что вносимая сумма положительна, и прибавлять ее к текущему балансу.
withdraw(amount) - метод для снятия денег со счета. Метод должен проверять, что запрашиваемая сумма положительна и не превышает текущий баланс. Если условия выполняются, то запрашиваемая сумма должна вычитаться из текущего баланса. В противном случае, выведите сообщение об ошибке.
get_balance() - метод, который возвращает текущий баланс на счете.
__str__() - метод, который возвращает строковое представление объекта BankAccount в формате "Номер счета: [account_number], Владелец: [account_holder], Баланс: [balance]".

Задача: Магазин электроники
Создайте иерархию классов для представления товаров в магазине электроники. У вас должен быть базовый класс ElectronicProduct, от которого наследуются классы Laptop, Smartphone и Tablet. Каждый класс должен иметь свои уникальные атрибуты (например, screen_size для Tablet, battery_life для Laptop) и методы, а также общие методы, такие как get_info() для вывода информации о товаре.

Задача: Зоопарк
Создайте класс Animal в качестве базового класса для представления животных в зоопарке. Создайте несколько подклассов, представляющих различные типы животных, например, Mammal, Bird, Reptile, и т.д. Каждый класс должен иметь свои уникальные атрибуты и методы. Также добавьте методы для общих действий, которые могут выполнять все животные, например, eat() и make_sound().

Задача: Библиотека
Создайте класс LibraryItem в качестве базового класса для представления элементов библиотеки, таких как книги и фильмы. Создайте подклассы Book и Movie, которые будут наследовать атрибуты и методы от LibraryItem, а также иметь свои уникальные атрибуты, такие как author и director. Реализуйте полиморфизм через метод get_info(), чтобы он выводил информацию о книгах и фильмах в разном формате.

Задача: Авиакомпания
Создайте класс Flight для представления информации о рейсах авиакомпании. Создайте класс Passenger, который будет представлять пассажиров, и класс CrewMember, представляющий членов экипажа. Оба класса должны быть наследниками класса Person, у которого есть атрибуты name и age. У Passenger должен быть дополнительный атрибут seat_number, а у CrewMember - атрибут job_title. Реализуйте полиморфизм через метод print_info(), чтобы он выводил информацию о пассажирах и членах экипажа в разных форматах.